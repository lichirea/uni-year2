     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf, fopen, fclose, fprintf, fread
     8                                  import exit msvcrt.dll  
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fprintf msvcrt.dll
    13                                  import fread msvcrt.dll
    14                                  import fclose msvcrt.dll
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19                                  ;Read from the keyboard a number n and a number m. Then read from the keyboard m words separated by spaces. Write in file output.txt only the words that contain less than n consonants.
    20                                  
    21 00000000 00000000                    n dd 0;
    22 00000004 00000000                    m dd 0;
    23 00000008 00<rept>                    text times 50 db 0;
    24 0000003A 256400                      decimal_format db "%d",0;
    25                                      
    26 0000003D 257300                      string_format db "%s", 0;
    27 00000040 FFFFFFFF                    fd dd -1;
    28 00000044 6100                        access_mode db 'a', 0;
    29 00000046 6F75747075742E7478-         file_name db "output.txt", 0;
    29 0000004F 7400               
    30                                      
    31 00000051 25732000                    printing_format db "%s ", 0;
    32                                      
    33 00000055 00000000                    x dd 0;
    34                                      
    35                                  ; our code starts here
    36                                  segment code use32 class=code
    37                                      start:
    38                                          ; ...
    39                                          
    40                                          ;create output file
    41 00000000 68[44000000]                    push dword access_mode;
    42 00000005 68[46000000]                    push dword file_name;
    43 0000000A FF15[00000000]                  call [fopen];
    44 00000010 83C408                          add esp, 4 * 2;
    45 00000013 A3[40000000]                    mov [fd], eax; save the file descriptor
    46                                          
    47                                          
    48                                          ;read n and then m
    49                                          
    50 00000018 68[00000000]                    push dword n;
    51 0000001D 68[3A000000]                    push dword decimal_format;
    52 00000022 FF15[00000000]                  call [scanf]
    53 00000028 83C408                          add esp, 4*2
    54                                          
    55 0000002B 68[04000000]                    push dword m;
    56 00000030 68[3A000000]                    push dword decimal_format;
    57 00000035 FF15[00000000]                  call [scanf]
    58 0000003B 83C408                          add esp, 4*2
    59                                      
    60 0000003E 8B0D[04000000]                  mov ecx, dword [m]; read m words
    61                                          bigloop:
    62 00000044 890D[55000000]                      mov dword [x], ecx;save it because ecx is changed by calling functions
    63                                              
    64                                              ;read a word
    65 0000004A 68[08000000]                        push dword text;
    66 0000004F 68[3D000000]                        push dword string_format;
    67 00000054 FF15[00000000]                      call [scanf]
    68 0000005A 83C408                              add esp, 4*2
    69                                              
    70                                              
    71                                              ;count the consonants
    72                                              
    73 0000005D BE[08000000]                        mov esi, text;
    74 00000062 B931000000                          mov ecx, 49;max length of a word read
    75 00000067 BB00000000                          mov ebx, 0;
    76                                              counter:
    77 0000006C AC                                      lodsb
    78 0000006D 3C61                                    cmp al, 'a'
    79 0000006F 7415                                    je vowel
    80 00000071 3C65                                    cmp al, 'e'
    81 00000073 7411                                    je vowel
    82 00000075 3C69                                    cmp al, 'i'
    83 00000077 740D                                    je vowel
    84 00000079 3C6F                                    cmp al, 'o'
    85 0000007B 7409                                    je vowel
    86 0000007D 3C75                                    cmp al, 'u'
    87 0000007F 7405                                    je vowel
    88 00000081 3C00                                    cmp al, 0;
    89 00000083 7403                                    je word_is_over;
    90 00000085 43                                      inc ebx
    91                                                  vowel:
    92 00000086 E2E4                                loop counter
    93                                              
    94                                              word_is_over:
    95                                              
    96                                              
    97 00000088 3B1D[00000000]                      cmp ebx, [n];
    98 0000008E 7D19                                jge failed
    99                                              
   100                                              ;print the word if it's ok
   101 00000090 68[08000000]                        push dword text;
   102 00000095 68[51000000]                        push dword printing_format;
   103 0000009A FF35[40000000]                      push dword [fd];
   104 000000A0 FF15[00000000]                      call [fprintf];
   105 000000A6 83C40C                              add esp, 4*3
   106                                              
   107                                              failed:
   108                                              
   109 000000A9 8B0D[55000000]                      mov ecx, dword [x];
   110 000000AF E293                            loop bigloop
   111                                          
   112                                          ;close the file
   113 000000B1 FF35[40000000]                  push dword [fd]
   114 000000B7 FF15[00000000]                  call [fclose];
   115 000000BD 83C404                          add esp, 4*1
   116                                          
   117                                          ; exit(0)
   118 000000C0 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   119 000000C2 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
