     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  ;A byte string S is given. Obtain the string 
    15                                  ;D by concatenating the elements found on the even positions of S 
    16                                  ;and then the elements found on the odd positions of S.
    17 00000000 0102030405060708        s db 1, 2, 3, 4, 5, 6, 7, 8
    18                                  ls equ $-s-1
    19 00000008 <res 00000010>          d resb 16
    20                                  
    21 00000018 <res 00000004>          x resd 1
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 B907000000                      mov ecx, ls ; loop counter
    28 00000005 BE00000000                      mov esi, 0 ; index for S
    29 0000000A BB00000000                      mov ebx, 0 ; index for D
    30 0000000F E325                            jecxz loopend1 ; in case the string is empty
    31                                          structure1: ; concates the even positions
    32 00000011 8A86[00000000]                      mov al, [s+esi];get the element from S
    33 00000017 8935[18000000]                      mov dword [x], esi; store the index of S
    34 0000001D 89DE                                mov esi, ebx; get the index of D
    35 0000001F 8886[08000000]                      mov [d+esi], al ; store the element in D
    36 00000025 8B35[18000000]                      mov esi, dword [x] ; get back the index od S
    37                                              
    38 0000002B 46                                  inc esi  ; increment the index of S and D
    39 0000002C 46                                  inc esi
    40 0000002D 43                                  inc ebx
    41                                              
    42 0000002E 49                                  dec ecx ; decrement it by 2; checking to make sure the number doesnt become negative
    43 0000002F E305                                JECXZ loopend1
    44 00000031 49                                  dec ecx
    45 00000032 E302                                JECXZ loopend1
    46 00000034 EBDB                                jmp structure1
    47                                          
    48                                          loopend1:
    49                                          
    50                                          
    51 00000036 B907000000                      mov ecx, ls
    52 0000003B BE01000000                      mov esi, 1 ; its the same but it starts from 1 instead of 0
    53 00000040 E325                            jecxz loopend2 ; in case the string is empty
    54                                          structure2: ; concates the odd positions
    55 00000042 8A86[00000000]                      mov al, [s+esi];get the element from S
    56 00000048 8935[18000000]                      mov dword [x], esi ; store the index of S
    57 0000004E 89DE                                mov esi, ebx ; get the index of D
    58 00000050 8886[08000000]                      mov [d+esi], al ; store the element in D
    59 00000056 8B35[18000000]                      mov esi, dword [x] ; get back the index od S
    60                                              
    61 0000005C 46                                  inc esi ; increment the index of S and D
    62 0000005D 46                                  inc esi
    63 0000005E 43                                  inc ebx
    64                                              
    65 0000005F 49                                  dec ecx
    66 00000060 E305                                JECXZ loopend2
    67 00000062 49                                  dec ecx
    68 00000063 E302                                JECXZ loopend2
    69 00000065 EBDB                                jmp structure2
    70                                          
    71                                          loopend2:
    72                                          
    73                                          
    74                                          
    75                                          ; exit(0)
    76 00000067 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    77 00000069 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
