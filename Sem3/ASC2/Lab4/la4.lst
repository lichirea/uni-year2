     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; Given the word A, obtain the integer number n represented on the bits 0-2 of A. Then obtain the word B by rotating A n positions to the right. Compute the doubleword C:
    14 00000000 8C00                    a dw 0000000010001100b; 
    15 00000002 <res 00000002>          b resw 1;
    16 00000004 <res 00000004>          c resd 1;
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;lets calculate b
    22 00000000 66A1[00000000]                  mov ax, [a];
    23 00000006 6683E007                        and ax, 00000000000000111b; this is n
    24 0000000A 6689C1                          mov cx, ax;
    25 0000000D 66A1[00000000]                  mov ax, [a];
    26 00000013 66D3C8                          ror ax, cl;
    27 00000016 66A3[02000000]                  mov word [b], ax;
    28                                          ; the bits 8-15 of C have the value 0
    29 0000001C BB00000000                      mov ebx, 0; well, it is done
    30                                          ;the bits 16-23 of C are the same as the bits of 2-9 of B
    31                                          ;we isolate bits 2-9 of b
    32 00000021 B800000000                      mov eax, 0;
    33 00000026 66A1[02000000]                  mov ax, [b];
    34 0000002C 6625FC03                        and ax, 0000001111111100b;
    35                                          ;rotate 14 bits to the left
    36 00000030 B10E                            mov cl, 14;
    37 00000032 D3C0                            rol eax, cl;
    38 00000034 09C3                            or ebx, eax; its done
    39                                          ;the bits 24-31 of C are the same as the bits of 7-14 of A
    40                                          ;isolate
    41 00000036 B800000000                      mov eax, 0;
    42 0000003B 66A1[00000000]                  mov ax, [a];
    43 00000041 6625807F                        and ax, 0111111110000000b;
    44                                          ;rotate 17 bits to the left;
    45 00000045 B111                            mov cl, 17;
    46 00000047 D3C0                            rol eax, cl;
    47 00000049 09C3                            or ebx, eax; done
    48                                          ;the bits 0-7 of C have the value 1
    49 0000004B 81CBFF000000                    or ebx, 11111111b;
    50 00000051 891D[04000000]                  mov dword [c], ebx;
    51                                          
    52                                         
    53                                          ; exit(0)
    54 00000057 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000059 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
